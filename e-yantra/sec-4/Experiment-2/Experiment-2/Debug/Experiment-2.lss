
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000206  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012b  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f6  00000000  00000000  00000515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000200  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	1e d0       	rcall	.+60     	; 0xb2 <main>
  76:	2e c0       	rjmp	.+92     	; 0xd4 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <motors_pin_config>:
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void set_duty_cycle(unsigned char dcycle_pin_a, unsigned char dcycle_pin_b) {
	OCR5AL_reg = dcycle_pin_a;
	OCR5BL_reg = dcycle_pin_b;
  7a:	87 b1       	in	r24, 0x07	; 7
  7c:	8f 60       	ori	r24, 0x0F	; 15
  7e:	87 b9       	out	0x07, r24	; 7
  80:	88 b1       	in	r24, 0x08	; 8
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	88 b9       	out	0x08, r24	; 8
  86:	08 95       	ret

00000088 <pwm_pin_config>:
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	80 66       	ori	r24, 0x60	; 96
  8c:	8a b9       	out	0x0a, r24	; 10
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	80 66       	ori	r24, 0x60	; 96
  92:	8b b9       	out	0x0b, r24	; 11
  94:	08 95       	ret

00000096 <motors_move_forward>:
  96:	88 b1       	in	r24, 0x08	; 8
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	88 b9       	out	0x08, r24	; 8
  9e:	08 95       	ret

000000a0 <timer_pwm_init>:
  a0:	81 ea       	ldi	r24, 0xA1	; 161
  a2:	84 bd       	out	0x24, r24	; 36
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bd       	out	0x25, r24	; 37
  aa:	16 bc       	out	0x26, r1	; 38
  ac:	17 bc       	out	0x27, r1	; 39
  ae:	18 bc       	out	0x28, r1	; 40
  b0:	08 95       	ret

000000b2 <main>:
 */
int main() {

	unsigned char duty_cycle = 0;
		
	pwm_pin_config();			// Initialize pwm pins as output
  b2:	ea df       	rcall	.-44     	; 0x88 <pwm_pin_config>
	timer_pwm_init();			// Initialize Timer 5
  b4:	f5 df       	rcall	.-22     	; 0xa0 <timer_pwm_init>
	
	motors_pin_config();		// Initialize motor pins
  b6:	e1 df       	rcall	.-62     	; 0x7a <motors_pin_config>
	motors_move_forward();		// Move the robot forward
  b8:	ee df       	rcall	.-36     	; 0x96 <motors_move_forward>
 *
 * @return     0
 */
int main() {

	unsigned char duty_cycle = 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
	motors_move_forward();		// Move the robot forward
	
	// The duty cycle for the left motor decreases from the maximum value while the duty cycle for the right motor increases from the minimum value. 
	// The resulting pattern traced by the robot is approximately an "S" shape.
	while(1){
		set_duty_cycle(255 - duty_cycle, duty_cycle);		  
  bc:	98 2f       	mov	r25, r24
  be:	90 95       	com	r25
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void set_duty_cycle(unsigned char dcycle_pin_a, unsigned char dcycle_pin_b) {
	OCR5AL_reg = dcycle_pin_a;
  c0:	97 bd       	out	0x27, r25	; 39
	OCR5BL_reg = dcycle_pin_b;
  c2:	88 bd       	out	0x28, r24	; 40
	
	// The duty cycle for the left motor decreases from the maximum value while the duty cycle for the right motor increases from the minimum value. 
	// The resulting pattern traced by the robot is approximately an "S" shape.
	while(1){
		set_duty_cycle(255 - duty_cycle, duty_cycle);		  
		duty_cycle++;										
  c4:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef e3       	ldi	r30, 0x3F	; 63
  c8:	fc e9       	ldi	r31, 0x9C	; 156
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x18>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x1e>
  d0:	00 00       	nop
  d2:	f4 cf       	rjmp	.-24     	; 0xbc <main+0xa>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
